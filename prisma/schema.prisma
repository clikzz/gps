generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id               String             @id @db.Uuid
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  name             String?
  avatar_url       String?
  email            String             @unique
  public_id        BigInt?            @default(autoincrement())
  badges           Badges[]
  forums           Forum[]
  lostPets         LostPets[]         @relation("UserReportedLostPets")
  marketplaceItems MarketplaceItems[]
  pets             Pets[]
  timeline_entries TimelineEntry[]
  reviews          Reviews[]

  @@map("UserProfiles")
}

model Pets {
  id               BigInt         @id @default(autoincrement())
  user_id          String         @db.Uuid
  name             String
  species          String
  active           Boolean?       @default(true)
  date_of_adoption DateTime?
  date_of_birth    DateTime?
  fixed            Boolean?
  photo_url        String?
  sex              String?
  LostPets         LostPets[]
  Medications      Medications[]
  user             UserProfile    @relation(fields: [user_id], references: [id])
  timeline_entries TimelineEntry[]
  Vaccinations     Vaccinations[]

  @@map("Pets")
}

model TimelineEntry {
  id          String   @id @default(uuid()) 
  user_id     String   @db.Uuid 
  pet_id      BigInt 
  title       String? 
  description String? 
  event_date  DateTime 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user       UserProfile          @relation(fields: [user_id], references: [id])
  pet        Pets                 @relation(fields: [pet_id], references: [id])
  photos     TimelineEntryPhoto[] 
  milestones Milestone[]          

  @@map("TimelineEntries") 
}

model TimelineEntryPhoto {
  id                String   @id @default(uuid())
  timeline_entry_id String 
  photo_url         String 
  order             Int? 
  created_at        DateTime @default(now())
  timeline_entry TimelineEntry @relation(fields: [timeline_entry_id], references: [id], onDelete: Cascade)

  @@map("TimelineEntryPhotos")
}

model Milestone {
  id        String  @id @default(uuid())
  name      String  @unique 
  icon_url  String? 
  timeline_entries TimelineEntry[]

  @@map("Milestones")
}

model Vaccinations {
  id               BigInt    @id @default(autoincrement())
  pet_id           BigInt
  type             String?
  application_date DateTime?
  next_dose_date   DateTime?
  pet              Pets      @relation(fields: [pet_id], references: [id])

  @@map("Vaccinations")
}

model Medications {
  id       BigInt  @id @default(autoincrement())
  pet_id   BigInt
  name     String?
  dose     String?
  duration String?
  pet      Pets    @relation(fields: [pet_id], references: [id])

  @@map("Medications")
}

model Forum {
  id         BigInt      @id @default(autoincrement())
  user_id    String      @db.Uuid
  title      String?
  content    String?
  created_at DateTime    @default(now())
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("Forum")
}

model Badges {
  id         BigInt      @id @default(autoincrement())
  user_id    String      @db.Uuid
  badge_type String?
  awarded_at DateTime    @default(now())
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("Badges")
}

model Services {
  id             BigInt    @id @default(autoincrement())
  name           String?
  address        String?
  hours          String?
  contact_info   String?
  average_rating Float?
  reviews        Reviews[]

  @@map("Services")
}

model Reviews {
  id         BigInt      @id @default(autoincrement())
  service_id BigInt
  user_id    String      @db.Uuid
  rating     Int?
  comment    String?
  created_at DateTime    @default(now())
  service    Services    @relation(fields: [service_id], references: [id])
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("Reviews")
}

model LostPets {
  id          BigInt      @id @default(autoincrement())
  pet_id      BigInt
  reported_by String      @db.Uuid
  location    String?
  reported_at DateTime    @default(now())
  pet         Pets        @relation(fields: [pet_id], references: [id])
  user        UserProfile @relation("UserReportedLostPets", fields: [reported_by], references: [id])

  @@map("LostPets")
}

model MarketplaceItems {
  id             BigInt      @id @default(autoincrement())
  user_id        String      @db.Uuid
  title          String?
  image_url      String?
  description    String?
  condition      String?
  price          Float?
  contact_method String?
  created_at     DateTime    @default(now())
  status         String?     @default("active")
  user           UserProfile @relation(fields: [user_id], references: [id])

  @@map("MarketplaceItems")
}

model debug_logs {
  id            Int       @id @default(autoincrement())
  event_type    String?
  user_id       String?   @db.Uuid
  email         String?
  error_message String?
  details       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}
