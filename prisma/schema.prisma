generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id               String             @id @db.Uuid
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  name             String?
  avatar_url       String?
  email            String             @unique
  public_id        BigInt?            @default(autoincrement())
  menssageCount    Int                @default(0)
  lastMessageAt    DateTime?
  marketplaceItems MarketplaceItems[]
  missingPets      MissingPet[]
  pets             Pets[]
  Posts            Posts[]
  reviews          Reviews[]
  TimelineEntries  TimelineEntries[]
  Topics           Topics[]

  @@map("UserProfiles")
}

model Pets {
  id               BigInt            @id @default(autoincrement())
  user_id          String            @db.Uuid
  name             String
  species          String
  active           Boolean?          @default(true)
  date_of_adoption DateTime?
  date_of_birth    DateTime?
  fixed            Boolean?
  photo_url        String?
  sex              String?
  Medications      Medications[]
  missingReports   MissingPet[]
  user             UserProfile       @relation(fields: [user_id], references: [id])
  TimelineEntries  TimelineEntries[]
  Vaccinations     Vaccinations[]

  @@map("Pets")
}

model Vaccinations {
  id               BigInt    @id @default(autoincrement())
  pet_id           BigInt
  type             String?
  application_date DateTime?
  next_dose_date   DateTime?
  pet              Pets      @relation(fields: [pet_id], references: [id])

  @@map("Vaccinations")
}

model Medications {
  id       BigInt  @id @default(autoincrement())
  pet_id   BigInt
  name     String?
  dose     String?
  duration String?
  pet      Pets    @relation(fields: [pet_id], references: [id])

  @@map("Medications")
}

model Services {
  id             BigInt    @id @default(autoincrement())
  name           String?
  address        String?
  hours          String?
  contact_info   String?
  average_rating Float?
  reviews        Reviews[]

  @@map("Services")
}

model Reviews {
  id         BigInt      @id @default(autoincrement())
  service_id BigInt
  user_id    String      @db.Uuid
  rating     Int?
  comment    String?
  created_at DateTime    @default(now())
  service    Services    @relation(fields: [service_id], references: [id])
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("Reviews")
}

model MissingPet {
  id          BigInt      @id @default(autoincrement())
  pet_id      BigInt
  reporter_id String      @db.Uuid
  latitude    Float
  longitude   Float
  photo_url   String?
  description String?
  reported_at DateTime    @default(now())
  pet         Pets        @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  reporter    UserProfile @relation(fields: [reporter_id], references: [id], onDelete: Cascade)

  @@unique([pet_id, reporter_id])
  @@map("MissingPets")
}

model MarketplaceItems {
  id             BigInt      @id @default(autoincrement())
  user_id        String      @db.Uuid
  title          String?
  image_url      String?
  description    String?
  condition      String?
  price          Float?
  contact_method String?
  created_at     DateTime    @default(now())
  status         String?     @default("active")
  user           UserProfile @relation(fields: [user_id], references: [id])

  @@map("MarketplaceItems")
}

model debug_logs {
  id            Int       @id @default(autoincrement())
  event_type    String?
  user_id       String?   @db.Uuid
  email         String?
  error_message String?
  details       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model Milestones {
  id              String            @id
  name            String            @unique
  icon_url        String?
  TimelineEntries TimelineEntries[] @relation("MilestoneToTimelineEntry")
}

model TimelineEntries {
  id                  String                @id
  user_id             String                @db.Uuid
  pet_id              BigInt
  title               String?
  description         String?
  event_date          DateTime
  created_at          DateTime              @default(now())
  updated_at          DateTime
  Pets                Pets                  @relation(fields: [pet_id], references: [id])
  UserProfiles        UserProfile           @relation(fields: [user_id], references: [id])
  TimelineEntryPhotos TimelineEntryPhotos[]
  Milestones          Milestones[]          @relation("MilestoneToTimelineEntry")
}

model TimelineEntryPhotos {
  id                String          @id
  timeline_entry_id String
  photo_url         String
  order             Int?
  created_at        DateTime        @default(now())
  TimelineEntries   TimelineEntries @relation(fields: [timeline_entry_id], references: [id], onDelete: Cascade)
}

model Posts {
  id           BigInt      @id @default(autoincrement())
  topicId      BigInt
  userId       String      @db.Uuid
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Topics       Topics      @relation(fields: [topicId], references: [id])
  UserProfiles UserProfile @relation(fields: [userId], references: [id])

  @@map("Posts")
}

model Subforums {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  description String?
  category    String
  Topics      Topics[]

  @@map("Subforums")
}

model Topics {
  id           BigInt      @id @default(autoincrement())
  subforumId   BigInt
  userId       String      @db.Uuid
  title        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Posts        Posts[]
  Subforums    Subforums   @relation(fields: [subforumId], references: [id])
  UserProfiles UserProfile @relation(fields: [userId], references: [id])

  @@map("Topics")
}