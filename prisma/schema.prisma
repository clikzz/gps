generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Nueva tabla User que reemplaza UserProfiles
model User {
  id         String   @id @db.Uuid  // Sin @default(uuid()) porque viene de auth.users
  email      String?
  name       String?
  avatar_url String?
  created_at DateTime @default(now())
  tag        Int      @unique @default(autoincrement())
  
  // Relaciones
  pets              Pet[]
  reviews           Review[]
  missingReports    MissingPet[]
  marketplaceItems  MarketplaceItem[]
  timelineEntries   TimelineEntry[]
  posts             Post[]
  topics            Topic[]
  
  @@map("users")
}

model Pet {
  id               BigInt            @id @default(autoincrement())
  user_id          String            @db.Uuid
  name             String
  species          String
  active           Boolean?          @default(true)
  date_of_adoption DateTime?
  date_of_birth    DateTime?
  fixed            Boolean?
  photo_url        String?
  sex              String?
  deleted          Boolean?          @default(false)
  
  // Relaciones
  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  medications      Medication[]
  missingReports   MissingPet[]
  timelineEntries  TimelineEntry[]
  vaccinations     Vaccination[]

  @@map("Pets")
}

model Vaccination {
  id               BigInt    @id @default(autoincrement())
  pet_id           BigInt
  type             String?
  application_date DateTime?
  next_dose_date   DateTime?
  
  // Relaci贸n
  pet              Pet       @relation(fields: [pet_id], references: [id], onDelete: Cascade)

  @@map("Vaccinations")
}

model Medication {
  id       BigInt  @id @default(autoincrement())
  pet_id   BigInt
  name     String?
  dose     String?
  duration String?
  
  // Relaci贸n
  pet      Pet     @relation(fields: [pet_id], references: [id], onDelete: Cascade)

  @@map("Medications")
}

model Service {
  id          BigInt    @id @default(autoincrement())
  name        String
  category    String
  description String
  latitude    Float
  longitude   Float
  
  // Relaciones
  reviews     Review[]

  @@map("Services")
}

model Review {
  id         BigInt   @id @default(autoincrement())
  service_id BigInt
  user_id    String   @db.Uuid
  rating     Int?
  comment    String?
  created_at DateTime @default(now())
  
  // Relaciones
  service    Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Reviews")
}

model MissingPet {
  id          BigInt   @id @default(autoincrement())
  pet_id      BigInt
  reporter_id String   @db.Uuid
  latitude    Float
  longitude   Float
  description String?
  reported_at DateTime @default(now())
  photo_urls  String[]
  
  // Relaciones
  pet         Pet      @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  reporter    User     @relation(fields: [reporter_id], references: [id], onDelete: Cascade)

  @@unique([pet_id, reporter_id])
  @@map("MissingPets")
}

model MarketplaceItem {
  id             BigInt   @id @default(autoincrement())
  user_id        String   @db.Uuid
  title          String?
  image_url      String?
  description    String?
  condition      String?
  price          Float?
  contact_method String?
  created_at     DateTime @default(now())
  status         String?  @default("active")
  
  // Relaci贸n
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("MarketplaceItems")
}

model DebugLog {
  id            Int       @id @default(autoincrement())
  event_type    String?
  user_id       String?   @db.Uuid
  email         String?
  error_message String?
  details       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  
  @@map("debug_logs")
}

model Milestone {
  id              String         @id @default(uuid())
  name            String         @unique
  icon_url        String?
  
  // Relaciones
  timelineEntries TimelineEntry[] @relation("MilestoneToTimelineEntry")
  
  @@map("Milestones")
}

model TimelineEntry {
  id                  String                @id @default(uuid())
  user_id             String                @db.Uuid
  pet_id              BigInt
  title               String?
  description         String?
  event_date          DateTime
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  
  // Relaciones
  user                User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  pet                 Pet                   @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  photos              TimelineEntryPhoto[]
  milestones          Milestone[]           @relation("MilestoneToTimelineEntry")
  
  @@map("TimelineEntries")
}

model TimelineEntryPhoto {
  id                String        @id @default(uuid())
  timeline_entry_id String
  photo_url         String
  order             Int?
  created_at        DateTime      @default(now())
  
  // Relaci贸n
  timelineEntry     TimelineEntry @relation(fields: [timeline_entry_id], references: [id], onDelete: Cascade)
  
  @@map("TimelineEntryPhotos")
}

model Post {
  id        BigInt   @id @default(autoincrement())
  topic_id  BigInt
  user_id   String   @db.Uuid
  content   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relaciones
  topic     Topic    @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("Posts")
}

model Subforum {
  id          BigInt  @id @default(autoincrement())
  name        String  @unique
  description String?
  category    String
  
  // Relaciones
  topics      Topic[]
  
  @@map("Subforums")
}

model Topic {
  id          BigInt    @id @default(autoincrement())
  subforum_id BigInt
  user_id     String    @db.Uuid
  title       String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relaciones
  posts       Post[]
  subforum    Subforum  @relation(fields: [subforum_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("Topics")
}