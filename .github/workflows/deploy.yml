name: Deploy to University Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DIRECT_URL: ${{ secrets.DIRECT_URL }}

    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved netcat-openbsd

    - name: Connect to VPN
      uses: kota65535/github-openvpn-connect-action@v2
      with:
        config_file: .github/workflows/client.ovpn
        username: ${{ secrets.VPN_USERNAME }}
        password: ${{ secrets.VPN_PASSWORD }}

    - name: Verify VPN connection
      run: |
        echo "🔍 Verifying VPN connection..."
        echo "=== Network Interfaces ==="
        ip addr show
        echo "=== VPN Routes ==="
        ip route show
        
        # Verificar que la interfaz VPN esté activa
        if ! ip addr show | grep -q "tun\|tap"; then
          echo "❌ No VPN interface found"
          exit 1
        else
          echo "✅ VPN interface detected"
        fi
        
        # Verificar conectividad con el servidor
        SERVER_IP="146.83.198.35"
        echo "🔍 Testing connectivity to server IP: $SERVER_IP"
        
        if timeout 10 ping -c 2 "$SERVER_IP" >/dev/null 2>&1; then
          echo "✅ Server is reachable via ping"
        else
          echo "⚠️ Server is not reachable via ping, but continuing..."
        fi
        
        if timeout 10 nc -z "$SERVER_IP" 1207 >/dev/null 2>&1; then
          echo "✅ SSH port 1207 is open"
        else
          echo "⚠️ SSH port 1207 is not responding, but continuing..."
        fi
        
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        cat >> ~/.ssh/config << EOF
        Host target-server
            HostName ${{ env.SERVER_IP }}
            Port 1207
            User aloyola
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ConnectTimeout 30
            ServerAliveInterval 10
            ServerAliveCountMax 3
        EOF
        
        echo "🔧 SSH configured for server: ${{ env.SERVER_IP }}"

    - name: Test SSH connection
      run: |
        echo "🔍 Testing SSH connection to ${{ env.SERVER_IP }}:1207..."
        
        if timeout 30 ssh -v -o ConnectTimeout=25 target-server "echo 'SSH connection successful'"; then
          echo "✅ SSH connection working"
        else
          echo "❌ SSH connection failed"
          exit 1
        fi

    - name: Deploy to server
      run: |
        echo "🚀 Starting deployment..."
        
        ssh target-server << 'EOF'
        set -e
        echo "🔄 Switching to root and updating code..."
        echo "${{ secrets.SERVER_ROOT_PASSWORD }}" | su - root -c '
          set -e
          cd /home/aloyola
          
          if [ -d "mi-proyecto" ]; then
            echo "📦 Creating backup..."
            cp -r mi-proyecto mi-proyecto.backup.$(date +%Y%m%d_%H%M%S) || true
          fi
          
          if [ -d "mi-proyecto" ] && [ -d "mi-proyecto/.git" ]; then
            echo "🔄 Updating existing repository..."
            cd mi-proyecto
            git fetch --all
            git reset --hard origin/main
            git pull origin main
          else
            echo "📥 Cloning repository..."
            rm -rf mi-proyecto
            git clone https://github.com/clikzz/gps.git mi-proyecto
            cd mi-proyecto
          fi
          
          echo "✅ Code updated successfully"
        '
        EOF

    - name: Install and restart application
      run: |
        echo "🔧 Installing dependencies and restarting application..."
        
        ssh target-server << 'EOF'
        set -e
        echo "${{ secrets.SERVER_ROOT_PASSWORD }}" | su - root -c '
          set -e
          cd /home/aloyola/mi-proyecto
          
          echo "📝 Creating environment file..."
          cat > .env.local << "ENVEOF"
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          ENVEOF
          
          echo "📦 Installing dependencies..."
          npm ci --only=production --silent
          
          if [ -f "prisma/schema.prisma" ]; then
            echo "🔨 Generating Prisma client..."
            npx prisma generate
          fi
          
          echo "🏗️ Building application..."
          npm run build
          
          echo "🔄 Managing PM2 process..."
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            npm install -g pm2
          fi
          
          if [ ! -f "ecosystem.config.js" ]; then
            cat > ecosystem.config.js << "ECOEOF"
            module.exports = {
              apps: [{
                name: "next-app",
                script: "npm",
                args: "start",
                cwd: "/home/aloyola/mi-proyecto",
                instances: 1,
                exec_mode: "fork",
                watch: false,
                max_memory_restart: "1G",
                env: {
                  NODE_ENV: "production",
                  PORT: 1208
                },
                error_file: "/home/aloyola/logs/next-app-err.log",
                out_file: "/home/aloyola/logs/next-app-out.log",
                log_file: "/home/aloyola/logs/next-app.log"
              }]
            }
            ECOEOF
          fi
          
          mkdir -p /home/aloyola/logs
          pm2 stop next-app || echo "App was not running"
          pm2 delete next-app || echo "App was not in PM2"
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "✅ Application restarted successfully"
        '
        EOF

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        APP_URL="http://${{ env.SERVER_IP }}:1208"
        echo "🌐 Testing application at: $APP_URL"
        sleep 20
        
        max_attempts=6
        for attempt in $(seq 1 $max_attempts); do
          echo "🔄 Verification attempt $attempt/$max_attempts..."
          response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$APP_URL" || echo "000")
          
          case $response in
            200|301|302|304)
              echo "✅ Application is responding successfully (HTTP $response)"
              exit 0
              ;;
            000)
              echo "⏳ Connection timeout (attempt $attempt/$max_attempts)"
              ;;
            *)
              echo "⚠️ Unexpected response: HTTP $response (attempt $attempt/$max_attempts)"
              ;;
          esac
          
          [ $attempt -lt $max_attempts ] && sleep 10
        done
        
        echo "❌ Application verification failed after $max_attempts attempts"
        ssh target-server "echo '${{ secrets.SERVER_ROOT_PASSWORD }}' | su - root -c 'pm2 logs next-app --lines 30' 2>/dev/null || echo 'Could not retrieve PM2 logs'"
        exit 1

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        rm -f ~/.ssh/id_rsa
        sudo pkill -f openvpn || true
        echo "✅ Cleanup completed"

    - name: Deployment Summary
      if: always()
      run: |
        echo "=================================="
        echo "🚀 DEPLOYMENT SUMMARY"
        echo "=================================="
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Status: SUCCESS"
          echo "🌐 Application URL: http://${{ env.SERVER_IP }}:1208"
        else
          echo "❌ Status: FAILED"
          echo "📝 Check the logs above for details"
        fi
        
        echo "🕐 Completed at: $(date)"
        echo "=================================="
