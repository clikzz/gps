generator client {
provider = "prisma-client-js"
}

datasource db {
provider  = "postgresql"
url       = env("DATABASE_URL")
directUrl = env("DIRECT_URL")
}

model Medications {
id             BigInt   @id @default(autoincrement())
pet_id         BigInt
name           String
dose           String
duration       String
start_date     DateTime
next_dose_date DateTime?
notes          String?
active         Boolean   @default(true)
created_at     DateTime  @default(now())
updated_at     DateTime  @updatedAt
Pets           Pets      @relation(fields: [pet_id], references: [id], onDelete: Cascade)
HealthAlerts   HealthAlerts[]
}

model Vaccinations {
id               BigInt    @id @default(autoincrement())
pet_id           BigInt
name             String
type             String?
application_date DateTime
next_dose_date   DateTime?
notes            String?
active           Boolean   @default(true)
created_at       DateTime  @default(now())
updated_at       DateTime  @updatedAt
Pets             Pets      @relation(fields: [pet_id], references: [id], onDelete: Cascade)
HealthAlerts     HealthAlerts[]
}

model HealthAlerts {
id           BigInt      @id @default(autoincrement())
user_id      String      @db.Uuid
pet_id       BigInt
alert_type   String
medication_id BigInt?
vaccination_id BigInt?
title        String
message      String
alert_date   DateTime
sent         Boolean     @default(false)
created_at   DateTime    @default(now())
users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
Pets         Pets        @relation(fields: [pet_id], references: [id], onDelete: Cascade)
Medications  Medications? @relation(fields: [medication_id], references: [id], onDelete: Cascade)
Vaccinations Vaccinations? @relation(fields: [vaccination_id], references: [id], onDelete: Cascade)

@@index([alert_date, sent])
}

model Milestones {
id              String            @id
name            String            @unique
icon_url        String?
TimelineEntries TimelineEntries[] @relation("MilestoneToTimelineEntry")
}

model MissingPets {
id           BigInt   @id @default(autoincrement())
pet_id       BigInt
reporter_id  String   @db.Uuid
latitude     Float
longitude    Float
full_address String?
address      String?
street       String?
city         String?
region       String?
postcode     String?
country      String?
description  String?
reported_at  DateTime @default(now())
photo_urls   String[]
resolved     Boolean? @default(false)
FoundReports FoundReports[]

Pets        Pets     @relation(fields: [pet_id], references: [id], onDelete: Cascade)
users       users    @relation(fields: [reporter_id], references: [id], onDelete: Cascade)
}

model FoundReports {
id             BigInt      @id @default(autoincrement())
missingPetId   BigInt
helperId       String      @db.Uuid
photo_urls     String[]
description    String?
latitude       Float
longitude      Float
full_address   String?
address        String?
street         String?
city           String?
region         String?
postcode       String?
country        String?
created_at     DateTime    @default(now())

MissingPets    MissingPets @relation(fields: [missingPetId], references: [id], onDelete: Cascade)
users          users       @relation(fields: [helperId], references: [id], onDelete: Cascade)
}

model MarketplaceItem {
  id             BigInt        @id @default(autoincrement())
  user_id        String        @db.Uuid
  title          String
  description    String?
  category       ItemCategory
  condition      ItemCondition
  price          Decimal       @db.Decimal(10,2)
  photo_urls     String[]
  status         ItemStatus    @default(ACTIVE)

  latitude       Float
  longitude      Float
  city           String?
  region         String?
  country        String?

  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  seller         users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([status, category, created_at])
}

model Pets {
id               BigInt            @id @default(autoincrement())
user_id          String            @db.Uuid
name             String
species          String
active           Boolean?          @default(true)
date_of_adoption DateTime?
date_of_birth    DateTime?
fixed            Boolean?
photo_url        String?
sex              String?
deleted          Boolean?          @default(false)
is_lost          Boolean?          @default(false)
Medications      Medications[]
MissingPets      MissingPets[]
users            users             @relation(fields: [user_id], references: [id], onDelete: Cascade)
TimelineEntries  TimelineEntries[]
Vaccinations     Vaccinations[]
HealthAlerts     HealthAlerts[]
}

model Posts {
id         BigInt   @id @default(autoincrement())
content    String
created_at DateTime @default(now())
topic_id   BigInt
updated_at DateTime @updatedAt
moderated_at DateTime?
moderated_by String? 
user_id    String   @db.Uuid
Topics     Topics   @relation(fields: [topic_id], references: [id], onDelete: Cascade)
users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Reviews {
id         BigInt   @id @default(autoincrement())
service_id BigInt
user_id    String   @db.Uuid
rating     Int?
comment    String?
created_at DateTime @default(now())
Services   Services @relation(fields: [service_id], references: [id], onDelete: Cascade)
users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Services {
id          BigInt    @id @default(autoincrement())
name        String
category    String
description String
latitude    Float
longitude   Float
Reviews     Reviews[]
}

model Subforums {
id          BigInt   @id @default(autoincrement())
name        String   @unique
description String?
category    String
Topics      Topics[]
}

model TimelineEntries {
id                  String                @id @default(cuid())
user_id             String                @db.Uuid
pet_id              BigInt
title               String?
description         String?
event_date          DateTime
created_at          DateTime              @default(now())
updated_at          DateTime              @default(now()) @updatedAt
Pets                Pets                  @relation(fields: [pet_id], references: [id], onDelete: Cascade)
users               users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
TimelineEntryPhotos TimelineEntryPhotos[]
Milestones          Milestones[]          @relation("MilestoneToTimelineEntry")
}

model TimelineEntryPhotos {
id                String          @id @default(cuid())
timeline_entry_id String
photo_url         String
order             Int?
created_at        DateTime        @default(now())
TimelineEntries   TimelineEntries @relation(fields: [timeline_entry_id], references: [id], onDelete: Cascade)
}

model Topics {
id          BigInt    @id @default(autoincrement())
title       String
created_at  DateTime  @default(now())
subforum_id BigInt
updated_at  DateTime  @updatedAt
user_id     String    @db.Uuid
Posts       Posts[]
Subforums   Subforums @relation(fields: [subforum_id], references: [id], onDelete: Cascade)
users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model debug_logs {
id            Int       @id @default(autoincrement())
event_type    String?
user_id       String?   @db.Uuid
email         String?
error_message String?
details       Json?
created_at    DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
id               String             @id @db.Uuid
email            String?
name             String?
avatar_url       String?            @default("https://fwjwzustxplwudyivyjs.supabase.co/storage/v1/object/public/images/profile/defaultpfp.png")
created_at       DateTime           @default(now())
tag              Int                @unique @default(autoincrement())
lastMessageAt    DateTime?          @map("lastMessageAt")
menssageCount    Int                @default(0)
role             Role               @default(USER)
status           UserStatus         @default(ACTIVE)
MarketplaceItems MarketplaceItem[]
MissingPets      MissingPets[]
FoundReports     FoundReports[]
Pets             Pets[]
Posts            Posts[]
Reviews          Reviews[]
TimelineEntries  TimelineEntries[]
Topics           Topics[]
HealthAlerts     HealthAlerts[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum ItemCondition {
  NEW
  USED
}

enum ItemStatus {
  ACTIVE
  SOLD
  REMOVED
}

enum ItemCategory {
  FOOD
  TOYS
  BEDDING
  WALK_WEAR
  HEALTH_GROOM
  TRAVEL
  OTHER
}